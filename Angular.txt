ng new client --strict false
npm install

// Making HTTP requests in angular

ADD  HttpClientModule, to app.module.ts


// Enable croud in Web Api


npm install ngx-bootstrap --save
ng add ngx-bootstrap


*** Import from module in app.module.ts

ng g c nav --skip-tests

add home page: ng g c home --skip-tests

add register page; 


What are Observables ?
New standard for managinng async data included in ES7
Introduced in angular v2
Observables are lazy collections of multiple values over time
You can think of observables like a newsletter 
-> Only subscribers of the newsletter recieive the newsletter
-> If on-one subscribs to the newsletter it probably will not be printed.


Promise: 
provides a single future values
not lazy
can not cancle

Observable: 
Emits multiple values over time
lazy
able to cancel
can use with map, filter, reduce and other operators


angular Service
getMembers()
{
    return this.http.ret('api/users')
}


angular component onInit()
getMembers()
{
    this.Service.getMembers();
}


Observables and Rxjs

// Just select part of data- from api: 
getMembers()
{
    return this.http.get('api/users').pipe(
        map(members=>){
            console.log(members.id)
            return members.id
        }
    )
}


getMembers()
{
    this.Service.getMembers().subscribe(members=>{
        this.members = members
    }, error=>{

    },()=>{
        console.log("Completed)
    })
}



Async Pipe : Automatically subscribe/unsubsribes from the observables
<li *ngFor='let member of Service.getMembers() | async'> {{member.username}}
 

 Notify anything
 npm install ngx-toastr


 // Auth in angular 
 ng g guard auth --skip-tests






 \\ Section-09: 
 Using typescript types
 Using the async pipe
 Using bootstrap for styling
 Basic css tricks to enhance the look
 Using a 3rd party photo gallery



 Creating member type ts 
 google: Json to ts then create member.ts and photo.ts 

 \\ Get members 
 

 Section 10
 1) angular template forms
 2) the canDeactivate route guard
 3) the @ViewChild decorator
 4) persisting changes to the Api
 5) adding loading indicators to the client app
 6) caching data in angular services


// Create a member edit components
ng g c member-edit --skip-tests


// Display loading indicators


// Section 11
1) Photo storage options
2) Adding related entities
3) Using a 3rd party API
4) Using the debugger(again!)
5) Updating and deleting resources
6) What to return when creating resources in a REST based API


Photo Storage Options
** Direct on sql database(binary files)
** In server using file system
** Cloud

Cloudinary
1) Client uploads photo to API with JWT
2) Server uploads the photo to Cloudinary
3) Cloudinary stores photo, sends response
4) API saves photo URL and Public ID to DB
5) Saved in DB and given auto generated ID
6) 201 Created Response sent to client with location header


Section-12
1) use reactive forms 
2) use angular validation for inputs
3) implement custor validation
4) implement resuable form controls
5) working with date inputs








npm install -f  @microsoft/signalr
// create new service
ng g s presence --skip-tests


import { Injectable } from '@angular/core';
import { MatSnackBar } from '@angular/material/snack-bar';
import * as signalR from '@microsoft/signalr';
import { HubConnection, HubConnectionBuilder } from '@microsoft/signalr';
import { environment } from 'src/environments/environment';
import { User } from '../_models/User';

@Injectable({
  providedIn: 'root'
})
export class PresenceService {
  
  hubUrl = environment.hubUrl;
  private hubConnection!: HubConnection;

  constructor(private _snackBar: MatSnackBar) { }


  openSnackBar(message: string, action: string) {
    this._snackBar.open(message, action);
  }


  createHubConnection(user : User)
  {
    this.hubConnection = new HubConnectionBuilder()
        .withUrl('https://localhost:7249/hubs/presence', {
          skipNegotiation: true,
          transport: signalR.HttpTransportType.WebSockets,
          accessTokenFactory: ()=> user.token
        })
        .withAutomaticReconnect()
        .build()

    this.hubConnection
        .start()
        .catch(error => {
          console.log(error)
        })

    
    
    this.hubConnection.on('UserIsOnline', username => {
      console.log("has coneected " + username);
      this.openSnackBar("Has connected", username);
    })

    this.hubConnection.on('UserIsOffline', username=>{

      this.openSnackBar("has disconnected", username);
    })
  }


  stopHubConnection()
  {
    this.hubConnection.stop().catch(error => console.log(error));
  }
}




